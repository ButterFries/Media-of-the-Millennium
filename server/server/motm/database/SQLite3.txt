https://www.sqlitetutorial.net/sqlite-java/
https://www.sqlite.org/download.html
	--run binary file with `./sqlite3 database.db` or equivalent command to exec from commandline
	--on ubuntu64 the binary for 32 might not work, just `sudo apt-get install sqlite3` and use `sqlite3 database.db`


javac appServer.java
java -classpath '.:sqlite-jdbc-3.27.2.1.jar' appServer
//not sure what to do to include in the app build, add to classpath somewhere





-- notes -----------------------------------------------------------------------
### print outs for debug and logging have not been added
### code is not complete! modify and verify after copy-pasting


### accounts table and insert
./sqlite3 appdatabase.db "CREATE TABLE accounts (userID INTEGER PRIMARY KEY, username TEXT NOT NULL UNIQUE, email TEXT NOT NULL UNIQUE, password TEXT NOT NULL, favorites TEXT DEFAULT '');"
./sqlite3 appdatabase.db "INSERT INTO accounts (username, email, password) VALUES ('example', 'email', 'passwordhash');"


### extra safety by using pbkdf2
https://security.stackexchange.com/questions/16354/whats-the-advantage-of-using-pbkdf2-vs-sha256-to-generate-an-aes-encryption-key


### foreign key support
http://code-know-how.blogspot.com/2011/10/how-to-enable-foreign-keys-in-sqlite3.html
sqlite> PRAGMA foreign_keys = ON;



### administrator table
CREATE TABLE admins (adminID INTEGER PRIMARY KEY, adminLevel SHORT NOT NULL DEFAULT 1, userID INTEGER NOT NULL, FOREIGN KEY (userID) REFERENCES accounts (userID));
### we could have something like adminLevels where each level has different privledges. otherwise ignore it when adding
INSERT INTO admins (userID) VALUES (~~~);
INSERT INTO admins (userID, adminLevel) VALUES (~~~,  X);



### media titles table and insert
./sqlite3 appdatabase.db "CREATE TABLE mediaTitles (mediaID INTEGER PRIMARY KEY, title TEXT NOT NULL, mediaType TEXT NOT NULL, summary TEXT, genres TEXT NOT NULL, tags TEXT, rating FLOAT DEFAULT 0.0, numRaters INTEGER DEFAULT 0);
./sqlite3 appdatabase.db "INSERT INTO mediaTitles (title, mediaType, summary, genres, tags) VALUES ('example', 'testtype', 'this is very nice media, much good', 'action,horror', 'sword,fun,blood')";
# use media types {'cinema', 'music', 'tv-series', 'video game', 'novel'}
# use genre types {'depends on media type'}



###  ratings table
CREATE TABLE ratings (ratingID INTEGER PRIMARY KEY, rating FLOAT NOT NULL, userID INTEGER NOT NULL, mediaID INTEGER NOT NULL, FOREIGN KEY (userID) REFERENCES accounts (userID), FOREIGN KEY (mediaID) REFERENCES mediaTitles (mediaID));





================================================================================
###   accounts   ###
================================================================================

### userID -- autogenerated (or could be designated) for uniqueness
#  		this is used for identifying an account, so that the username & email could be changed later on
# 	https://www.sqlitetutorial.net/sqlite-autoincrement/


./sqlite3 appdatabase.db "CREATE TABLE accounts (userID INTEGER PRIMARY KEY, username TEXT NOT NULL UNIQUE, email TEXT NOT NULL UNIQUE, passwordhash TEXT NOT NULL);"

### password should be converted to a hash via hashing function such as md5 or sha256 for security
### can also salt passwords (add something to the password string before hashing) to make it even safer   
### https://www.thesslstore.com/blog/difference-encryption-hashing-salting/

./sqlite3 appdatabase.db "INSERT INTO accounts (username, email, passwordhash) VALUES ('example', 'email', 'passwordhash');"

### example of hashing
echo "mypassword" | md5sum
>>  d84c7934a7a786d26da3d34d5f7c6c86  -


### example of salting the password
saltshaker=pepper; echo "mypassword"$saltshaker
>>  mypasswordpepper
saltshaker=pepper; echo "mypassword"$saltshaker | md5sum
>>  338504fc625032d49565c3eb08dfd1f4  -


### extra safety by using pbkdf2
https://security.stackexchange.com/questions/16354/whats-the-advantage-of-using-pbkdf2-vs-sha256-to-generate-an-aes-encryption-key


###  for admin accounts just do it manually in the terminal commandline using
INSERT INTO admins (userID) VALUES (~~~);
INSERT INTO admins (userID, adminLevel) VALUES (~~~,  X);

================================================================================
###  media page db stuff  ###
================================================================================
##  mediaID -- unique integer id, primary key
##  title -- the title/name of the movie/music/game/etc
##  mediaType -- the type of media;  {'cinema', 'music', 'tv-series', 'video game', 'novel'}
##  summary -- string of words
##  rating -- float, current rating
##  numRaters -- total number of all people who've rated this title
##  genres -- string of associated genres (comma separated) 'action,horror'

### to calculate the new rating, take the current rating (say 3.4) and current numRaters (9000)
###    updatedRating = (numRaters/(numRaters+1))*rating + newRating*(1/(numRaters+1))
###    this preserves the ratio of ratings


./sqlite3 appdatabase.db "CREATE TABLE mediaTitles (mediaID INTEGER PRIMARY KEY, title TEXT NOT NULL, summary TEXT, genres TEXT NOT NULL, rating FLOAT DEFAULT 0.0, numRaters INTEGER DEFAULT 0);

./sqlite3 appdatabase.db "INSERT INTO mediaTitles (title, mediaType, summary) VALUES ('example', 'testtype', 'this is very nice media, much good', 'action,horror')";

================================================================================
###   ratings   ###
================================================================================
CREATE TABLE ratings (ratingID INTEGER PRIMARY KEY, rating FLOAT NOT NULL, userID INTEGER NOT NULL, mediaID INTEGER NOT NULL, FOREIGN KEY (userID) REFERENCES accounts (userID), FOREIGN KEY (mediaID) REFERENCES mediaTitles (mediaID));


================================================================================
###   reviews   ###
================================================================================

























