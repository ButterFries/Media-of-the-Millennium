https://www.sqlitet utorial.net/sqlite-java/
https://www.sqlite.org/download.html
	--run binary file with `./sqlite3 database.db` or equivalent command to exec from commandline
	--on ubuntu64 the binary for 32 might not work, just `sudo apt-get install sqlite3` and use `sqlite3 database.db`




-- notes -----------------------------------------------------------------------

### to open sqlite shell
./sqlite3 appdatabase.db
>.tables
>.schema ---table---
### to execute single line on db without shell
./sqlite3 appdatabase.db "---STATEMENT/QUERY/REQUEST---"

## command can be delimited by semicolon, similar to bash commands


### foreign key support
http://code-know-how.blogspot.com/2011/10/how-to-enable-foreign-keys-in-sqlite3.html
> PRAGMA foreign_keys = ON;

### accounts table and insert
### include values for favorites and bookmarks if needed (INSERT)
./sqlite3 appdatabase.db "CREATE TABLE accounts (userID INTEGER PRIMARY KEY, username TEXT NOT NULL UNIQUE, email TEXT NOT NULL UNIQUE, password TEXT NOT NULL, favorites TEXT DEFAULT '', bookmarks TEXT DEFAULT '');"
./sqlite3 appdatabase.db "INSERT INTO accounts (username, email, password) VALUES ('example', 'email', 'passwordhash');"
## this must be done for each session of opening the sqlite shell or executing a command




### accounts table and insert
CREATE TABLE accounts (userID INTEGER PRIMARY KEY, username TEXT NOT NULL UNIQUE, email TEXT NOT NULL UNIQUE, password TEXT NOT NULL, favorites TEXT DEFAULT '');
INSERT INTO accounts (username, email, password) VALUES ('example', 'email', 'passwordhash');




### administrator table (child of accounts)
CREATE TABLE admins (adminID INTEGER PRIMARY KEY REFERENCES accounts(userID), adminLevel SHORT NOT NULL DEFAULT 1);
## we could have something like adminLevels where each level has different privledges. otherwise ignore it when adding
INSERT INTO admins (userID) VALUES (~~~);
INSERT INTO admins (userID, adminLevel) VALUES (~~~,  X);

(deprec) //CREATE TABLE admins (adminID INTEGER PRIMARY KEY, adminLevel SHORT NOT NULL DEFAULT 1, userID INTEGER NOT NULL, FOREIGN KEY (userID) REFERENCES accounts (userID));




### media titles table and insert
CREATE TABLE mediaTitles (mediaID INTEGER PRIMARY KEY, title TEXT NOT NULL, mediaType TEXT NOT NULL, summary TEXT DEFAULT '', genres TEXT NOT NULL, tags TEXT DEFAULT '', rating FLOAT DEFAULT 0.0, numRaters INTEGER DEFAULT 0, links STRING DEFAULT '', image BLOB);
INSERT INTO mediaTitles (title, mediaType, summary, genres, tags) VALUES ('example', 'testtype', 'this is very nice media, much good', 'action,horror', 'sword,fun,blood');
# use media types {'cinema', 'music', 'tv-series', 'video game', 'novel'}
# use genre types {'depends on media type'}

### cinema table (child of mediaTitles)
CREATE TABLE cinemaInfo (mediaID INTEGER PRIMARY KEY REFERENCES mediaTitles(mediaID), producer STRING DEFAULT '', director STRING DEFAULT '', writter STRING DEFAULT '', editor STRING DEFAULT '', starring STRING DEFAULT '', productionCompanies STRING DEFAULT '', distributors STRING DEFAULT '', releaseDate STRING DEFAULT '', runningTime STRING DEFAULT '', language STRING DEFAULT '', musicBy STRING DEFAULT '', cinematography STRING DEFAULT '', budget STRING DEFAULT '', boxOffice STRING DEFAULT '');

### music table (child of mediaTitles)
CREATE TABLE musicInfo (mediaID INTEGER PRIMARY KEY REFERENCES mediaTitles(mediaID), album STRING DEFAULT '', artist STRING DEFAULT '', duration FLOAT DEFAULT 0.0, year STRING DEFAULT '');
# duration in seconds

### tvseries table (child of mediaTitles)
CREATE TABLE tvseriesInfo (mediaID INTEGER PRIMARY KEY REFERENCES mediaTitles(mediaID), producer STRING DEFAULT '', director STRING DEFAULT '', writter STRING DEFAULT '', starring STRING DEFAULT '', cinematography STRING DEFAULT '', releases STRING DEFAULT '', seasons STRING DEFAULT '', episodes STRING DEFAULT '', episodeLength STRING DEFAULT '', language STRING DEFAULT '');
#episodes could be delimited by comma for seasons; ex (13,12,15) for season 1,2,3

### videogames table (child of mediaTitles)
CREATE TABLE videogameInfo (mediaID INTEGER PRIMARY KEY REFERENCES mediaTitles(mediaID), developers STRING DEFAULT '', publishers STRING DEFAULT '', directors STRING DEFAULT '', designers STRING DEFAULT '', programmers STRING DEFAULT '', artists STRING DEFAULT '', writers STRING DEFAULT '', composers STRING DEFAULT '', engine STRING DEFAULT '', platforms STRING DEFAULT '', release STRING DEFAULT '', modesOfPlay STRING DEFAULT '');

### novels table (child of mediaTitles)
CREATE TABLE novelInfo (mediaID INTEGER PRIMARY KEY REFERENCES mediaTitles(mediaID), author STRING DEFAULT '', country STRING DEFAULT '', language STRING DEFAULT '', publisher STRING DEFAULT '', publishedDate STRING DEFAULT '', numBooks SHORT DEFAULT 0, numChapters SHORT DEFAULT 0, status STRING DEFAULT '');




###  ratings table
CREATE TABLE ratings (ratingID INTEGER PRIMARY KEY, rating FLOAT NOT NULL, userID INTEGER NOT NULL, mediaID INTEGER NOT NULL, FOREIGN KEY (userID) REFERENCES accounts (userID), FOREIGN KEY (mediaID) REFERENCES mediaTitles (mediaID));




### reviews tables
TODO



================================================================================
###   accounts   ###
================================================================================

### userID -- autogenerated (or could be designated) for uniqueness
#  		this is used for identifying an account, so that the username & email could be changed later on
# 	https://www.sqlitetutorial.net/sqlite-autoincrement/


./sqlite3 appdatabase.db "CREATE TABLE accounts (userID INTEGER PRIMARY KEY, username TEXT NOT NULL UNIQUE, email TEXT NOT NULL UNIQUE, passwordhash TEXT NOT NULL, favorites TEXT DEFAULT '', bookmarks TEXT DEFAULT '');"

### password should be converted to a hash via hashing function such as md5 or sha256 for security
### can also salt passwords (add something to the password string before hashing) to make it even safer   
### https://www.thesslstore.com/blog/difference-encryption-hashing-salting/

### include values for favorites and bookmarks if needed
./sqlite3 appdatabase.db "INSERT INTO accounts (username, email, passwordhash) VALUES ('example', 'email', 'passwordhash');"

### example of hashing
echo "mypassword" | md5sum
>>  d84c7934a7a786d26da3d34d5f7c6c86  -


### example of salting the password
saltshaker=pepper; echo "mypassword"$saltshaker
>>  mypasswordpepper
saltshaker=pepper; echo "mypassword"$saltshaker | md5sum
>>  338504fc625032d49565c3eb08dfd1f4  -


### extra safety by using pbkdf2
https://security.stackexchange.com/questions/16354/whats-the-advantage-of-using-pbkdf2-vs-sha256-to-generate-an-aes-encryption-key


###  for admin accounts just do it manually in the terminal commandline using
INSERT INTO admins (userID) VALUES (~~~);
INSERT INTO admins (userID, adminLevel) VALUES (~~~,  X);

================================================================================
###  media page db stuff  ###
================================================================================
##  mediaID -- unique integer id, primary key
##  title -- the title/name of the movie/music/game/etc
##  mediaType -- the type of media;  {'cinema', 'music', 'tv-series', 'video game', 'novel'}
##  summary -- string of words
##  rating -- float, current rating
##  numRaters -- total number of all people who've rated this title
##  genres -- string of associated genres (comma separated) 'action,horror'
##  tags -- string of associated tags (comma separated) 'yoda,swords'

### to calculate the new rating, take the current rating (say 3.4) and current numRaters (9000)
###    updatedRating = (numRaters/(numRaters+1))*rating + newRating*(1/(numRaters+1))
###    this preserves the ratio of ratings


./sqlite3 appdatabase.db "CREATE TABLE mediaTitles (mediaID INTEGER PRIMARY KEY, title TEXT NOT NULL, summary TEXT, genres TEXT NOT NULL, tags TEXT DEFAULT '', rating FLOAT DEFAULT 0.0, numRaters INTEGER DEFAULT 0);

./sqlite3 appdatabase.db "INSERT INTO mediaTitles (title, mediaType, summary) VALUES ('example', 'testtype', 'this is very nice media, much good', 'action,horror', 'swords,yoda')";

================================================================================
###   ratings   ###
================================================================================
CREATE TABLE ratings (ratingID INTEGER PRIMARY KEY, rating FLOAT NOT NULL, userID INTEGER NOT NULL, mediaID INTEGER NOT NULL, FOREIGN KEY (userID) REFERENCES accounts (userID), FOREIGN KEY (mediaID) REFERENCES mediaTitles (mediaID));


================================================================================
###   reviews   ###
================================================================================
CREATE TABLE reviews (user_ID INTEGER PRIMARY KEY,media_ID TEXT(100) UNIQUE,rating_FID INTEGER UNIQUE, rating FLOAT, review_ID INTEGER UNIQUE,review_text TEXT(500))
























